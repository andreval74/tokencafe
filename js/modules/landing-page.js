/**
 * ================================================================================
 * TOKENCAFE - LANDING PAGE
 * ================================================================================
 * Sistema para gerenciamento da landing page (index.html raiz)
 * P√°gina simples de apresenta√ß√£o com futuras integra√ß√µes
 * ================================================================================
 */

class LandingPage {
    constructor() {
        this.initialized = false;
    }

    /**
     * Inicializar sistema da landing page
     */
    async init() {
        if (this.initialized) return;
        
        console.log('üöÄ TokenCafe Landing Page - Sistema Unificado');
        
        // Aguardar DOM estar pronto
        if (document.readyState === 'loading') {
            await new Promise(resolve => document.addEventListener('DOMContentLoaded', resolve));
        }
        
        this.setupGlobalFunctions();
        this.setupAnimations();
        
        this.initialized = true;
        console.log('‚úÖ Landing Page inicializada');
    }

    /**
     * Configurar fun√ß√µes globais
     */
    setupGlobalFunctions() {
        // Fun√ß√£o global para desconex√£o (futuras integra√ß√µes)
        window.TokenCafeWallet = {
            globalDisconnect: () => {
                console.log('Fun√ß√£o de desconex√£o dispon√≠vel para futuras integra√ß√µes');
                // Implementar logout se necess√°rio
            }
        };

        // Fun√ß√£o para navega√ß√£o
        window.navigateToApp = () => {
            window.location.href = 'pages/index.html';
        };
    }

    /**
     * Configurar anima√ß√µes e intera√ß√µes
     */
    setupAnimations() {
        // Adicionar qualquer l√≥gica de anima√ß√£o espec√≠fica da landing page
        // Por exemplo, observer para anima√ß√µes on scroll
        this.setupScrollAnimations();
    }

    /**
     * Configurar anima√ß√µes de scroll
     */
    setupScrollAnimations() {
        // Observer para anima√ß√µes quando elementos entram na viewport
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observar elementos com anima√ß√£o
        const animatedElements = document.querySelectorAll('.TokenCafe-fade-in, .TokenCafe-fade-in-up');
        animatedElements.forEach(el => observer.observe(el));
    }
}

// Instanciar e inicializar
const landingPage = new LandingPage();
landingPage.init().catch(error => {
    console.error('‚ùå Erro ao inicializar Landing Page:', error);
});

export default landingPage;